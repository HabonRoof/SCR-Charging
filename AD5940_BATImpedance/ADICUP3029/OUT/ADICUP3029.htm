<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\OUT\ADICUP3029.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\OUT\ADICUP3029.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jan 12 11:08:57 2022
<BR><P>
<H3>Maximum Stack Usage =       1032 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; AD5940_Main &rArr; BATShowResult &rArr; AppBATCtrl &rArr;  AppBATCtrl (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[38]">ADC_Int_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">ADC_Int_Handler</a><BR>
 <LI><a href="#[7d]">AD5940_Delay10us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7d]">AD5940_Delay10us</a><BR>
 <LI><a href="#[7e]">AD5940_ClksCalculate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7e]">AD5940_ClksCalculate</a><BR>
 <LI><a href="#[a4]">AppBATCtrl</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a4]">AppBATCtrl</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[38]">ADC_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[11]">Battery_Voltage_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[37]">Beep_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[30]">Crypto_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[33]">Crystal_osc_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[31]">DMA_ADC0_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[2b]">DMA_AES0_IN_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[2c]">DMA_AES0_OUT_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[1d]">DMA_Err_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[2d]">DMA_FLASH0_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[2a]">DMA_I2C0_MX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[29]">DMA_I2C0_SRX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[28]">DMA_I2C0_STX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[39]">DMA_SIP0_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[3a]">DMA_SIP1_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[3b]">DMA_SIP2_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[3c]">DMA_SIP3_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[3d]">DMA_SIP4_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[3e]">DMA_SIP5_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[3f]">DMA_SIP6_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[40]">DMA_SIP7_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[23]">DMA_SPI0_RX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[22]">DMA_SPI0_TX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[25]">DMA_SPI1_RX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[24]">DMA_SPI1_TX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[1f]">DMA_SPI2_RX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[1e]">DMA_SPI2_TX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[20]">DMA_SPORT0A_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[21]">DMA_SPORT0B_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[27]">DMA_UART_RX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[26]">DMA_UART_TX_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[b]">Ext_Int0_Handler</a> from adicup3029port.o(i.Ext_Int0_Handler) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[c]">Ext_Int1_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[d]">Ext_Int2_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[e]">Ext_Int3_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[17]">Flash0_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[13]">GPIO_A_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[14]">GPIO_B_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[15]">GP_Tmr0_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[16]">GP_Tmr1_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[32]">GP_Tmr2_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[1c]">I2C0_Master_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[1b]">I2C0_Slave_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[35]">PLL_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[36]">RNG_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[12]">RTC0_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[a]">RTC1_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[45]">Reset_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[19]">SPI0_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[34]">SPI1_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[1a]">SPI2_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[2e]">SPORT0A_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[2f]">SPORT0B_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[42]">SystemInit</a> from system_aducm3029.o(i.SystemInit) referenced from startup_aducm3029.o(.text)
 <LI><a href="#[18]">UART_Int_Handler</a> from adicup3029port.o(i.UART_Int_Handler) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[10]">Vreg_over_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[f]">WDog_Tmr_Int_Handler</a> from startup_aducm3029.o(.text) referenced from startup_aducm3029.o(RESET)
 <LI><a href="#[43]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_aducm3029.o(.text)
 <LI><a href="#[44]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[41]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[43]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(.text)
</UL>
<P><STRONG><a name="[ea]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[46]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[65]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[eb]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ec]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ed]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ee]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ef]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[45]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ADC_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Int_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Battery_Voltage_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>Beep_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Crypto_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>Crystal_osc_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA_ADC0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA_AES0_IN_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA_AES0_OUT_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA_Err_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA_FLASH0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_I2C0_MX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_I2C0_SRX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_I2C0_STX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA_SIP0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA_SIP1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA_SIP2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA_SIP3_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA_SIP4_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA_SIP5_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA_SIP6_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA_SIP7_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_SPI0_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA_SPI0_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA_SPI1_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_SPI1_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA_SPI2_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA_SPI2_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA_SPORT0A_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA_SPORT0B_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA_UART_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA_UART_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Ext_Int1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>Ext_Int2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Ext_Int3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Flash0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GPIO_A_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GPIO_B_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>GP_Tmr0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>GP_Tmr1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GP_Tmr2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C0_Master_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C0_Slave_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PLL_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RNG_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RTC1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPORT0A_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPORT0B_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Vreg_over_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WDog_Tmr_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm3029.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtCfg
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f2]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Int_Handler
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d6]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Int_Handler
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexDivFloat
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATDataProcess
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexDivFloat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexDivFloat
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATDataProcess
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexDivFloat
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCheckFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqMeasureGen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATDataProcess
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATShowResult
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqMeasureGen
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqMeasureGen
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATDataProcess
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATDataProcess
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_l2f</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ffltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqMeasureGen
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATMeasureRCAL
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCheckFreq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATShowResult
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCheckFreq
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqMeasureGen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATShowResult
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartCmdProcess
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCheckFreq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqMeasureGen
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f9]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[51]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[58]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[57]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[dc]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[fa]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[47]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>AD5940BATStructInit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ad5940main.o(i.AD5940BATStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD5940BATStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATGetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[71]"></a>AD5940_ADCBaseCfgS</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ADCBaseCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AD5940_ADCBaseCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[73]"></a>AD5940_ADCDigCompCfgS</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_ADCDigCompCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AD5940_ADCDigCompCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[74]"></a>AD5940_ADCFilterCfgS</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ADCFilterCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[76]"></a>AD5940_AFECtrlS</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_AFECtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqMeasureGen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
</UL>

<P><STRONG><a name="[77]"></a>AD5940_AFEPwrBW</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_AFEPwrBW))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AD5940_AFEPwrBW &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
</UL>

<P><STRONG><a name="[6f]"></a>AD5940_AGPIOCfg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_AGPIOCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AD5940_AGPIOCfg &rArr; AD5940_AGPIOPen &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOPen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOOen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOIen
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOFuncCfg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[78]"></a>AD5940_AGPIOFuncCfg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_AGPIOFuncCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AD5940_AGPIOFuncCfg &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[7a]"></a>AD5940_AGPIOIen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_AGPIOIen))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AD5940_AGPIOIen &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[79]"></a>AD5940_AGPIOOen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_AGPIOOen))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AD5940_AGPIOOen &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[7b]"></a>AD5940_AGPIOPen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_AGPIOPen))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AD5940_AGPIOPen &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[6b]"></a>AD5940_CLKCfg</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_CLKCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = AD5940_CLKCfg &rArr; AD5940_HFOSC32MHzCtrl &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[e9]"></a>AD5940_ChgSinFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ad5940main.o(i.AD5940_ChgSinFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartCmdProcess
</UL>

<P><STRONG><a name="[7e]"></a>AD5940_ClksCalculate</STRONG> (Thumb, 442 bytes, Stack size 128 bytes, ad5940.o(i.AD5940_ClksCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + In Cycle
<LI>Call Chain = AD5940_ClksCalculate &rArr;  AD5940_ClksCalculate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Notch60HzAvailable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Notch50HzAvailable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCheckFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqMeasureGen
</UL>

<P><STRONG><a name="[a7]"></a>AD5940_ClrMCUIntFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adicup3029port.o(i.AD5940_ClrMCUIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[84]"></a>AD5940_ComplexDivFloat</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, ad5940.o(i.AD5940_ComplexDivFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AD5940_ComplexDivFloat &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATDataProcess
</UL>

<P><STRONG><a name="[8c]"></a>AD5940_CsClr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adicup3029port.o(i.AD5940_CsClr))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIWriteReg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
</UL>

<P><STRONG><a name="[8f]"></a>AD5940_CsSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adicup3029port.o(i.AD5940_CsSet))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIWriteReg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
</UL>

<P><STRONG><a name="[85]"></a>AD5940_DFTCfgS</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_DFTCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AD5940_DFTCfgS &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[86]"></a>AD5940_DSPCfgS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_DSPCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = AD5940_DSPCfgS &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCDigCompCfgS
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCBaseCfgS
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StatisticCfgS
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DFTCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCheckFreq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
</UL>

<P><STRONG><a name="[7d]"></a>AD5940_Delay10us</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, adicup3029port.o(i.AD5940_Delay10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = AD5940_Delay10us &rArr;  AD5940_Delay10us (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATMeasureRCAL
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreCharge
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HWReset
</UL>

<P><STRONG><a name="[88]"></a>AD5940_EnterSleepS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_EnterSleepS))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AD5940_EnterSleepS &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
</UL>

<P><STRONG><a name="[6c]"></a>AD5940_FIFOCfg</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_FIFOCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AD5940_FIFOCfg &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[89]"></a>AD5940_FIFOCtrlS</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_FIFOCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AD5940_FIFOCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
</UL>

<P><STRONG><a name="[8a]"></a>AD5940_FIFOGetCnt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_FIFOGetCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AD5940_FIFOGetCnt &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATISR
</UL>

<P><STRONG><a name="[8b]"></a>AD5940_FIFORd</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_FIFORd))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AD5940_FIFORd &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite8B
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite32B
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite16B
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsClr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATISR
</UL>

<P><STRONG><a name="[91]"></a>AD5940_FIFOThrshSet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_FIFOThrshSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AD5940_FIFOThrshSet &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
</UL>

<P><STRONG><a name="[a5]"></a>AD5940_GetMCUIntFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adicup3029port.o(i.AD5940_GetMCUIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[7c]"></a>AD5940_HFOSC32MHzCtrl</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_HFOSC32MHzCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = AD5940_HFOSC32MHzCtrl &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
</UL>

<P><STRONG><a name="[92]"></a>AD5940_HSDacCfgS</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_HSDacCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AD5940_HSDacCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[93]"></a>AD5940_HSLoopCfgS</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_HSLoopCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = AD5940_HSLoopCfgS &rArr; AD5940_HSTIACfgS &rArr; __AD5940_SetDExRTIA &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGCfgS
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSTIACfgS
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSDacCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
</UL>

<P><STRONG><a name="[94]"></a>AD5940_HSTIACfgS</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_HSTIACfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = AD5940_HSTIACfgS &rArr; __AD5940_SetDExRTIA &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_SetDExRTIA
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[69]"></a>AD5940_HWReset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_HWReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AD5940_HWReset &rArr; AD5940_Delay10us &rArr;  AD5940_Delay10us (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_RstSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_RstClr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[6d]"></a>AD5940_INTCCfg</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_INTCCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = AD5940_INTCCfg &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATMeasureRCAL
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[6e]"></a>AD5940_INTCClrFlag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_INTCClrFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AD5940_INTCClrFlag &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATISR
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[9a]"></a>AD5940_INTCTestFlag</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_INTCTestFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = AD5940_INTCTestFlag &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATMeasureRCAL
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATISR
</UL>

<P><STRONG><a name="[6a]"></a>AD5940_Initialize</STRONG> (Thumb, 128 bytes, Stack size 120 bytes, ad5940.o(i.AD5940_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = AD5940_Initialize &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[9c]"></a>AD5940_LPAMPCfgS</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_LPAMPCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AD5940_LPAMPCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
</UL>

<P><STRONG><a name="[9d]"></a>AD5940_LPDAC0WriteS</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_LPDAC0WriteS))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AD5940_LPDAC0WriteS &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
</UL>

<P><STRONG><a name="[9e]"></a>AD5940_LPDAC1WriteS</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_LPDAC1WriteS))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AD5940_LPDAC1WriteS &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
</UL>

<P><STRONG><a name="[9f]"></a>AD5940_LPDACCfgS</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_LPDACCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AD5940_LPDACCfgS &rArr; AD5940_LPDAC1WriteS &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC1WriteS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC0WriteS
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
</UL>

<P><STRONG><a name="[a0]"></a>AD5940_LPLoopCfgS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_LPLoopCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AD5940_LPLoopCfgS &rArr; AD5940_LPDACCfgS &rArr; AD5940_LPDAC1WriteS &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPAMPCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
</UL>

<P><STRONG><a name="[a1]"></a>AD5940_MCUResourceInit</STRONG> (Thumb, 180 bytes, Stack size 4 bytes, adicup3029port.o(i.AD5940_MCUResourceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AD5940_MCUResourceInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_RstSet
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>AD5940_Main</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ad5940main.o(i.AD5940_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = AD5940_Main &rArr; BATShowResult &rArr; AppBATCtrl &rArr;  AppBATCtrl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_GetMCUIntFlag
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClrMCUIntFlag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATISR
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartCmdProcess
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATShowResult
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940BATStructInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQMmrTrig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>AD5940_Notch50HzAvailable</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, ad5940.o(i.AD5940_Notch50HzAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AD5940_Notch50HzAvailable &rArr; _is_value_in_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_value_in_table
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
</UL>

<P><STRONG><a name="[83]"></a>AD5940_Notch60HzAvailable</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, ad5940.o(i.AD5940_Notch60HzAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AD5940_Notch60HzAvailable &rArr; _is_value_in_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_value_in_table
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
</UL>

<P><STRONG><a name="[ac]"></a>AD5940_REFCfgS</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_REFCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AD5940_REFCfgS &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
</UL>

<P><STRONG><a name="[75]"></a>AD5940_ReadReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOGetCnt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DFTCfgS
</UL>

<P><STRONG><a name="[af]"></a>AD5940_ReadWriteNBytes</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, adicup3029port.o(i.AD5940_ReadWriteNBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AD5940_ReadWriteNBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite8B
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite32B
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite16B
</UL>

<P><STRONG><a name="[98]"></a>AD5940_RstClr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adicup3029port.o(i.AD5940_RstClr))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HWReset
</UL>

<P><STRONG><a name="[99]"></a>AD5940_RstSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adicup3029port.o(i.AD5940_RstSet))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HWReset
</UL>

<P><STRONG><a name="[b0]"></a>AD5940_SEQCfg</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AD5940_SEQCfg &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
</UL>

<P><STRONG><a name="[b1]"></a>AD5940_SEQCmdWrite</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQCmdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCheckFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqMeasureGen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
</UL>

<P><STRONG><a name="[cf]"></a>AD5940_SEQCycleTime</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQCycleTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD5940_SEQCycleTime
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqMeasureGen
</UL>

<P><STRONG><a name="[cd]"></a>AD5940_SEQGenCtrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqMeasureGen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
</UL>

<P><STRONG><a name="[ce]"></a>AD5940_SEQGenFetchSeq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenFetchSeq))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqMeasureGen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
</UL>

<P><STRONG><a name="[ca]"></a>AD5940_SEQGenInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenInit))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
</UL>

<P><STRONG><a name="[b7]"></a>AD5940_SEQGenInsert</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenInsert))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqMeasureGen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
</UL>

<P><STRONG><a name="[b3]"></a>AD5940_SEQInfoCfg</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQInfoCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AD5940_SEQInfoCfg &rArr; AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
</UL>

<P><STRONG><a name="[aa]"></a>AD5940_SEQMmrTrig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQMmrTrig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AD5940_SEQMmrTrig &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATMeasureRCAL
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[95]"></a>AD5940_SWMatrixCfgS</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SWMatrixCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AD5940_SWMatrixCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[70]"></a>AD5940_SleepKeyCtrlS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SleepKeyCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AD5940_SleepKeyCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATISR
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[87]"></a>AD5940_StatisticCfgS</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_StatisticCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AD5940_StatisticCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[b9]"></a>AD5940_SweepNext</STRONG> (Thumb, 534 bytes, Stack size 96 bytes, ad5940.o(i.AD5940_SweepNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = AD5940_SweepNext &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATDataProcess
</UL>

<P><STRONG><a name="[96]"></a>AD5940_WGCfgS</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WGCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AD5940_WGCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[be]"></a>AD5940_WGFreqCtrlS</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WGFreqCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AD5940_WGFreqCtrlS &rArr; AD5940_WGFreqWordCal &rArr; __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATRegModify
</UL>

<P><STRONG><a name="[bf]"></a>AD5940_WGFreqWordCal</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, ad5940.o(i.AD5940_WGFreqWordCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AD5940_WGFreqWordCal &rArr; __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqCtrlS
</UL>

<P><STRONG><a name="[c1]"></a>AD5940_WUPTCtrl</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WUPTCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AD5940_WUPTCtrl &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATRegModify
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
</UL>

<P><STRONG><a name="[c2]"></a>AD5940_WakeUp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = AD5940_WakeUp &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATISR
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
</UL>

<P><STRONG><a name="[72]"></a>AD5940_WriteReg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIWriteReg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOPen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOOen
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOIen
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOFuncCfg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFEPwrBW
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCDigCompCfgS
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCBaseCfgS
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_SetDExRTIA
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqCtrlS
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGCfgS
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StatisticCfgS
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQMmrTrig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC1WriteS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC0WriteS
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPAMPCfgS
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSTIACfgS
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSDacCfgS
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOThrshSet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCtrlS
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DFTCfgS
</UL>

<P><STRONG><a name="[c3]"></a>AppBATCheckFreq</STRONG> (Thumb, 314 bytes, Stack size 128 bytes, batimpedance.o(i.AppBATCheckFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = AppBATCheckFreq &rArr; AD5940_ClksCalculate &rArr;  AD5940_ClksCalculate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATRegModify
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
</UL>

<P><STRONG><a name="[a4]"></a>AppBATCtrl</STRONG> (Thumb, 348 bytes, Stack size 88 bytes, batimpedance.o(i.AppBATCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + In Cycle
<LI>Call Chain = AppBATCtrl &rArr;  AppBATCtrl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATMeasureRCAL
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreCharge
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQMmrTrig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOThrshSet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCtrlS
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATShowResult
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[67]"></a>AppBATGetCfg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, batimpedance.o(i.AppBATGetCfg))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940BATStructInit
</UL>

<P><STRONG><a name="[a8]"></a>AppBATISR</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, batimpedance.o(i.AppBATISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = AppBATISR &rArr; AppBATDataProcess &rArr; AD5940_SweepNext &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATRegModify
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATDataProcess
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOGetCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATMeasureRCAL
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[a3]"></a>AppBATInit</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, batimpedance.o(i.AppBATInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = AppBATInit &rArr; AppBATSeqCfgGen &rArr; AD5940_SweepNext &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFEPwrBW
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClrMCUIntFlag
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCheckFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqMeasureGen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATSeqCfgGen
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQMmrTrig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCtrlS
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[c7]"></a>AppBATMeasureRCAL</STRONG> (Thumb, 254 bytes, Stack size 440 bytes, batimpedance.o(i.AppBATMeasureRCAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = AppBATMeasureRCAL &rArr; AppBATISR &rArr; AppBATDataProcess &rArr; AD5940_SweepNext &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATISR
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQMmrTrig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
</UL>

<P><STRONG><a name="[d4]"></a>Arduino_WriteDn</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, adicup3029port.o(i.Arduino_WriteDn))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreCharge
</UL>

<P><STRONG><a name="[a9]"></a>BATShowResult</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, ad5940main.o(i.BATShowResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = BATShowResult &rArr; AppBATCtrl &rArr;  AppBATCtrl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[b]"></a>Ext_Int0_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adicup3029port.o(i.Ext_Int0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>MCUPlatformInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.MCUPlatformInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MCUPlatformInit &rArr; UrtCfg &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>SystemInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, system_aducm3029.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_system_EnableRetention
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>UART_Int_Handler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, adicup3029port.o(i.UART_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Int_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm3029.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>UrtCfg</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, main.o(i.UrtCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UrtCfg &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCUPlatformInit
</UL>

<P><STRONG><a name="[d7]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fe]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[9b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATMeasureRCAL
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATShowResult
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
</UL>

<P><STRONG><a name="[ff]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[100]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[e8]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[d9]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[da]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[db]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[dd]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[de]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[df]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[101]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[102]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[103]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e6]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[d5]"></a>adi_system_EnableRetention</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, system_aducm3029.o(i.adi_system_EnableRetention))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[44]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[e5]"></a>log</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[bc]"></a>log10</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, log10.o(i.log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
</UL>

<P><STRONG><a name="[41]"></a>main</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = main &rArr; AD5940_Main &rArr; BATShowResult &rArr; AppBATCtrl &rArr;  AppBATCtrl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCUPlatformInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[bd]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATShowResult
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
</UL>

<P><STRONG><a name="[d1]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATShowResult
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[a6]"></a>uartCmdProcess</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ad5940main.o(i.uartCmdProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uartCmdProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ChgSinFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8e]"></a>AD5940_ReadWrite16B</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ReadWrite16B))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AD5940_ReadWrite16B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWriteNBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIWriteReg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
</UL>

<P><STRONG><a name="[90]"></a>AD5940_ReadWrite32B</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ReadWrite32B))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AD5940_ReadWrite32B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWriteNBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIWriteReg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
</UL>

<P><STRONG><a name="[8d]"></a>AD5940_ReadWrite8B</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ReadWrite8B))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWriteNBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIWriteReg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
</UL>

<P><STRONG><a name="[b2]"></a>AD5940_SEQGenGetRegDefault</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQGenGetRegDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQReadReg
</UL>

<P><STRONG><a name="[b4]"></a>AD5940_SEQGenSearchReg</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenSearchReg))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQReadReg
</UL>

<P><STRONG><a name="[ad]"></a>AD5940_SEQReadReg</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQRegInfoInsert
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenSearchReg
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenGetRegDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>

<P><STRONG><a name="[b5]"></a>AD5940_SEQRegInfoInsert</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQRegInfoInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD5940_SEQRegInfoInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQReadReg
</UL>

<P><STRONG><a name="[b6]"></a>AD5940_SEQWriteReg</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQRegInfoInsert
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenSearchReg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>

<P><STRONG><a name="[ae]"></a>AD5940_SPIReadReg</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SPIReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite8B
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite32B
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite16B
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsClr
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenGetRegDefault
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>

<P><STRONG><a name="[b8]"></a>AD5940_SPIWriteReg</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SPIWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite8B
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite32B
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite16B
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsClr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>

<P><STRONG><a name="[97]"></a>__AD5940_SetDExRTIA</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, ad5940.o(i.__AD5940_SetDExRTIA))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = __AD5940_SetDExRTIA &rArr; AD5940_WriteReg &rArr; AD5940_SPIWriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSTIACfgS
</UL>

<P><STRONG><a name="[ab]"></a>_is_value_in_table</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ad5940.o(i._is_value_in_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _is_value_in_table
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Notch60HzAvailable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Notch50HzAvailable
</UL>

<P><STRONG><a name="[68]"></a>AD5940PlatformCfg</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, ad5940main.o(i.AD5940PlatformCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = AD5940PlatformCfg &rArr; AD5940_Initialize &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HWReset
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[c8]"></a>AppBATDataProcess</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, batimpedance.o(i.AppBATDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = AppBATDataProcess &rArr; AD5940_SweepNext &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexDivFloat
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATISR
</UL>

<P><STRONG><a name="[c9]"></a>AppBATRegModify</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, batimpedance.o(i.AppBATRegModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = AppBATRegModify &rArr; AppBATCheckFreq &rArr; AD5940_ClksCalculate &rArr;  AD5940_ClksCalculate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCheckFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqCtrlS
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATISR
</UL>

<P><STRONG><a name="[cb]"></a>AppBATSeqCfgGen</STRONG> (Thumb, 554 bytes, Stack size 288 bytes, batimpedance.o(i.AppBATSeqCfgGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = AppBATSeqCfgGen &rArr; AD5940_SweepNext &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenFetchSeq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenCtrl
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
</UL>

<P><STRONG><a name="[cc]"></a>AppBATSeqMeasureGen</STRONG> (Thumb, 312 bytes, Stack size 88 bytes, batimpedance.o(i.AppBATSeqMeasureGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = AppBATSeqMeasureGen &rArr; AD5940_ClksCalculate &rArr;  AD5940_ClksCalculate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenFetchSeq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenCtrl
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCycleTime
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATInit
</UL>

<P><STRONG><a name="[c5]"></a>PreCharge</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, batimpedance.o(i.PreCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PreCharge &rArr; AD5940_Delay10us &rArr;  AD5940_Delay10us (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arduino_WriteDn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBATCtrl
</UL>

<P><STRONG><a name="[e0]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d8]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[e3]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e2]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
